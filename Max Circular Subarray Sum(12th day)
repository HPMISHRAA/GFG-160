Given an array of integers arr[] in a circular fashion. Find the maximum subarray sum that we can get if we assume the array to be circular.

Examples:

Input: arr[] = [8, -8, 9, -9, 10, -11, 12]
Output: 22
Explanation: Starting from the last element of the array, i.e, 12, and moving in a circular fashion, we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22.
Input: arr[] = [10, -3, -4, 7, 6, 5, -4, -1]
Output: 23
Explanation: Maximum sum of the circular subarray is 23. The subarray is [7, 6, 5, -4, -1, 10].
Input: arr[] = [-1, 40, -14, 7, 6, 5, -4, -1] 
Output: 52
Explanation: Circular Subarray [7, 6, 5, -4, -1, -1, 40] has the maximum sum, which is 52.
Constraints:
1 <= arr.size() <= 105
-104 <= arr[i] <= 104

/*   class Solution {
    public int circularSubarraySum(int arr[]) {
     int n=arr.length;
     int max=0 ,min=0;
     int max1=Integer.MIN_VALUE,min1=Integer.MAX_VALUE;
     int sum=0;
     for(int num:arr){
         max=Math.max(num,max+num);
         max1=Math.max(max1,max);
         min=Math.min(num,min+num);
         min1=Math.min(min1,min);
         sum+=num;
     }
     if(max1<0){
         return max1;
     }
     int maxcircular=sum-min1;
     return Math.max(max1,maxcircular);
    }
}  
*/
